#!/usr/bin/env ruby
# frozen_string_literal: true

lib_dir = File.expand_path('../lib', __dir__)
$LOAD_PATH.unshift(lib_dir) unless $LOAD_PATH.include?(lib_dir)

require 'theme_park'
require 'tty-prompt'
require 'ascii_cards'

require 'theme_park/cli/components'
require 'theme_park/cli/render'

module ThemePark
  class CLI
    State = Types::Symbol.enum(
      :welcoming,
      :collecting_data,
      :playing,
      :done,
      :leaving
    )
    attr_reader :tty_prompt, :state, :render, :game

    def initialize
      @tty_prompt = TTY::Prompt.new
      @state = :welcoming
      @render = Render.new
    end

    def render!
      case state
      when :welcoming
        render.call(welcome_player)
      when :collecting_data
        render.call(prompt_player_data)
      when :playing
        render.call(game_state)
      when :done
        render.call(game_results)
      when :leaving
        render.call(curse_goodbye)
        set_state { exit 0 }
      end
    end

    def set_state
      result = yield

      @state = State[result] if result

      render!
    end

    def play!
      render!
    rescue Interrupt
      render.call(Components::Ciao.new)
    end

    private

    def render_hands
      player_hands = game.players.map do |player|
        state = player.state.to_s.tr('_', ' ')

        [
          "#{player.name}'s hand: (#{state}, bet: #{player.bet})",
          ASCIICards.stringify(*player.hand.map(&:to_ascii_card))
        ]
      end

      [
        "Dealer's hand:",
        ASCIICards.stringify(
          *game.dealer_hand.map(&:to_ascii_card)
        ),
        *player_hands
      ]
    end

    def game_state
      case game.state
      when :players_betting
        render_betting_state
      when :dealer_betting
        render_dealer_state
      when :finished
        render_finished_state
      end
    end

    def render_betting_state
      [
        "#### Players are betting turn: #{game.turn_count + 1} ###",
        render_hands,
        lambda {
          game.proceed
          render!
        },
        "\n"
      ]
    end

    def render_dealer_state
      [
        "#### Now it's dealer's turn to play ####",
        render_hands,
        lambda {
          tty_prompt.keypress('Press any key to continue')
          game.proceed
          render!
        },
        "\n"
      ]
    end

    def render_finished_state
      results = game.result.map do |result, player, amount = nil|
        case result
        when :lost
          "#{player.name} has lost Ɖ#{amount} to the casino"
        when :won
          "#{player.name} has won and gets Ɖ#{amount} from the casino"
        when :surrendered
          "#{player.name} has surrendered and pays Ɖ#{amount} to the casino"
        when :tie
          "#{player.name} has tied with the dealer and gets their bet back"
        end
      end

      [
        '#### The game has finished ####',
        '',
        '#### Hands at the end of the game ####',
        render_hands,
        *results
      ]
    end

    def prompt_player_data
      lambda {
        player_info = tty_prompt.collect do
          key(:name).ask(
            'Alright mate, what is your name though?',
            default: ENV['USER']
          )

          key(:bet).ask(
            "How much do you want to bet? We're talking SpaceDough",
            default: 200,
            convert: :int
          )
        end

        set_state do
          @game = Blackjack::Game.new(
            players: [
              Blackjack::Player.new(
                decision_handler: method(:decision_handler),
                name: player_info[:name],
                bet: player_info[:bet],
                hand: []
              )
            ]
          )

          :playing
        end
      }
    end

    def welcome_player
      [
        Components::ThemeParkLogo.new,
        Components::BenderSay.new(
          lines: [
            'Welcome to my theme park',
            "So far I've only got blackjack",
            'Wanna hang around and play?'
          ]
        ),
        lambda {
          if tty_prompt.yes?('Wanna play?')
            set_state { :collecting_data }
          else
            set_state { :leaving }
          end
        }
      ]
    end

    def curse_goodbye
      Components::CurseGoodbye.new
    end

    def decision_handler(_hand, _dealer_hand)
      tty_prompt.select(
        'What are you going to do?',
        %w[hit stand surrender],
        cycle: true
      ).to_sym
    end
  end
end

ThemePark::CLI.new.play!

#!/usr/bin/env ruby
# frozen_string_literal: true

lib_dir = File.expand_path('../lib', __dir__)
$LOAD_PATH.unshift(lib_dir) unless $LOAD_PATH.include?(lib_dir)\

require 'theme_park'
require 'tty-prompt'
require 'ascii_cards'

module ThemePark
  class CLI
    attr_reader :prompt
    def initialize
      @prompt = TTY::Prompt.new
    end

    def play!
      print_hello!

      bender_say!(
        'Welcome to my theme park',
        "So far I've only got blackjack",
        'Wanna hang around and play?'
      )

      exit_if_doesnt_want_to_play unless prompt.yes?('Wanna play?')

      player_params = prompt.collect do
        key(:name).ask(
          'Alright mate, what is your name though?',
          default: ENV['USER']
        )

        key(:bet).ask(
          "How much do you want to bet? We're talking SpaceDough",
          default: 200,
          convert: :int
        )
      end

      game = Blackjack::Game.new(
        players: [
          Blackjack::Player.new(decision_handler: method(:decision_handler), hand: [])
        ]
      )

      game.proceed until game.finished?
    rescue Interrupt
      say_ciao!
    end

    private

    def next_step!; end

    def print_hello!
      puts %q{
      ______                _           _
      | ___ \              | |         ( )
      | |_/ / ___ _ __   __| | ___ _ __|/ ___
      | ___ \/ _ \ '_ \ / _` |/ _ \ '__| / __|
      | |_/ /  __/ | | | (_| |  __/ |    \__ \
      \____/ \___|_| |_|\__,_|\___|_|    |___/


       _   _                                            _
      | | | |                                          | |
      | |_| |__   ___ _ __ ___   ___   _ __   __ _ _ __| | __
      | __| '_ \ / _ \ '_ ` _ \ / _ \ | '_ \ / _` | '__| |/ /
      | |_| | | |  __/ | | | | |  __/ | |_) | (_| | |  |   <
       \__|_| |_|\___|_| |_| |_|\___| | .__/ \__,_|_|  |_|\_\
                                      | |
                                      |_|
      }
    end

    def say_ciao!
      puts %q{
       .-------------.
      ( Ciao, losers! )
       '-------------,
                       `.
                         `.
                           `. ___
                          __,' __`.                _..----....____
              __...--.'``;.   ,.   ;``--..__     .'    ,-._    _.-'
        _..-''-------'   `'   `'   `'     O ``-''._   (,;') _,'
      ,'________________                          \`-._`-','
       `._              ```````````------...___   '-.._'-:
          ```--.._      ,.                     ````--...__\-.
                  `.--. `-`                       ____    |  |`
                    `. `.                       ,'`````.  ;  ;`
                      `._`.        __________   `.      \'__/`
                         `-:._____/______/___/____`.     \  `
                                     |       `._    `.    \
                                     `._________`-.   `.   `.___
                                                   SSt  `------'`
      }
    end

    def exit_if_doesnt_want_to_play!
      puts %q{
               o
               |
             ,'~'.
            /     \
           |   ____|_
           |  '___,,_'         .--------------------.
           |  ||(o |o)|       ( Stop wasting my time )
           |   -------         ,--------------------'
           |  _____|         -'
           \  '####,
            -------
          /________\
        (  )        |)
        '_ ' ,------|\         _
       /_ /  |      |_\        ||
      /_ /|  |     o| _\      _||
     /_ / |  |      |\ _\____//' |
    (  (  |  |      | (_,_,_,____/
     \ _\ |   ------|
      \ _\|_________|
       \ _\ \__\\__\
       |__| |__||__|
    ||/__/  |__||__|
            |__||__|
            |__||__|
            /__)/__)
           /__//__/
          /__//__/
         /__//__/.
       .'    '.   '.
      (_kOs____)____)
      }
      exit 0
    end

    def decision_handler(hand, dealer_hand)
      puts "Dealer's hand:"

      visible_card, *hidden_cards = dealer_hand

      puts ASCIICards.stringify(
        visible_card.to_ascii_card,
        *hidden_cards.map { |card| card.to_ascii_card(:hidden) }
      )

      puts 'Your hand:'

      puts ASCIICards.stringify(*hand.map(&:to_ascii_card))

      prompt.select('Choose wisely', %w[hit stand surrender], cycle: true).to_sym
    end

    def bender_say!(*lines)
      max_size = lines.map(&:size).max

      borders = '_' * max_size
      blank_lines = ' ' * max_size

      lines = lines.map { |line| line.ljust(max_size) }

      final_lines = [
        borders,
        blank_lines,
        *lines,
        borders
      ]

      puts %q{

              _
             ( )
              H
              H
             _H_              ___%s__
          .-'-.-'-.          |   %s  |
         /         \         |   %s  |
        |           |        |   %s  |
        |   .-------'._      |   %s  |
        |  / /  '.' '. \     |___%s__|
        |  \ \ @   @ / /       /
        |   '---------'       /
        |    _______|        /
        |  .'-+-+-+|        /
        |  '.-+-+-+|
        |    """""" |
        '-.__   __.-'
             """
      } % final_lines
    end
  end
end

ThemePark::CLI.new.play!
